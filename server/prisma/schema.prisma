// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["users", "administrators", "drivers", "customers", "loads", "routes", "trucks"]
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  role      Role // Pode ser 'adm', 'driver' ou 'customer'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  driver        Driver?
  customer      Customer?
  administrator Administrator?

  @@map("users")
  @@schema("users")
}

model Administrator {
  id String @id @default(uuid())

  document String

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map("administrators")
  @@schema("administrators")
}

model Driver {
  id String @id @default(uuid())

  // Complements
  cnh String @unique
  age Int

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  Truck Truck[] // A truck can have one or more Drivers

  @@map("drivers")
  @@schema("drivers")
}

model Customer {
  id String @id @default(uuid())

  // Complements
  cnpj    String @unique
  address String

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  load Load[]

  @@map("customers")
  @@schema("customers")
}

model Truck {
  id Int @id @default(autoincrement())

  // Complements
  capacity        String @unique
  plate           String @unique
  fabricationYear Int
  truckModel      String

  // Relations
  driver   Driver @relation(fields: [driverId], references: [id])
  driverId String

  load Load[]

  @@map("trucks")
  @@schema("trucks")
}

model Load {
  id Int @id @default(autoincrement())

  // Complements
  origin      String
  destination String
  dimensions  String
  weight      Float
  status      Status

  // Relations
  customer   Customer @relation(fields: [customerId], references: [cnpj])
  customerId String   @unique

  truck   Truck @relation(fields: [truckId], references: [id])
  truckId Int

  route Route[]

  @@map("loads")
  @@schema("loads")
}

model Route {
  id Int @id @default(autoincrement())

  // Complements
  stopPoints  String
  arrivalTime DateTime

  // Relationships
  load   Load @relation(fields: [loadId], references: [id])
  loadId Int

  @@map("routes")
  @@schema("routes")
}

enum Role {
  ADM
  CUSTOMER
  DRIVER

  @@schema("users")
}

enum Status {
  PROCESSING
  ONWAY
  DELIVERED

  @@schema("loads")
}
